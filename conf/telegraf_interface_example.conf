# THIS IS AN EXAMPLE CONFIGURATION FILE FOR GRNOC-STREAMING-TELEMETRY
#
# Copy this to collections.d/ without the .example suffix and update the parameters
# The file is in .toml format and behaves as such
# 
# Environment variables can be used anywhere in this config file, simply surround
# them with ${}. For strings the variable must be within quotes (ie, "${STR_VAR}"),
# for numbers and booleans they should be plain (ie, ${INT_VAR}, ${BOOL_VAR})
#
# For additional Telegraf parameters not in this example, check out:
# https://github.com/influxdata/telegraf/blob/master/docs/CONFIGURATION.md

###############################################################################
###############################################################################
# Tags that will be added to all Metrics
[global_tags]

# Telegraf Agent Config
[agent]

  # Collection interval for inputs
  interval = "60s"

  # Rounds collection interval to 'interval'
  # ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  # Telegraf will send metrics to outputs in batches of at most metric_batch_size metrics.
  # This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  # Maximum number of unwritten metrics per output.
  metric_buffer_limit = 100000

  # Collection jitter is used to jitter the collection by a random amount.
  # Each plugin will sleep for a random time within jitter before collecting.
  # This can be used to avoid many plugins querying things like sysfs at the
  # same time, which can have a measurable effect on the system.
  collection_jitter = "10s"

  # Default flushing interval for all outputs. 
  # Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "15s"

  # Jitter the flush interval by a random amount. This is primarily to avoid
  # large write spikes for users running a large number of telegraf instances.
  # ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "10s"

  # By default or when set to "0s", precision will be set to the same
  # timestamp order as the collection interval, with the maximum being 1s.
  #   ie, when interval = "10s", precision will be "1s"
  #       when interval = "250ms", precision will be "1ms"
  # Precision will NOT be used for service inputs. It is up to each individual
  # service input to set the timestamp at the appropriate precision.
  # Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  # Log at debug level.
  # debug = true

  # Log only error level messages.
  # quiet = false

  # Log file name, the empty string means to log to stderr.
  # logfile = "/var/log/grnoc/streaming-telemetry"

  # The logfile will be rotated after the time interval specified.  When set
  # to 0 no time based rotation is performed.  Logs are rotated only when
  # written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  # The logfile will be rotated when it becomes larger than the specified
  # size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  # Maximum number of rotated archives to keep, any older logs are deleted.
  # If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  # Override default hostname, if empty use os.Hostname()
  # hostname = "use.this.hostname.instead.net"


[[outputs.execd]]
  namepass = ["interface"]
  command = ["/usr/bin/python3", "/usr/bin/tsds-output.py", "/etc/telegraf/conf.d/config.yaml"]  
  data_format = "json"
  restart_delay = "10s"


# A starlark script that fixes bytes->bits to be more engineer friendly.
# This also provides an in telegraf "mapping" between the ifTable and ipTables
# since they use a slightly different indexing scheme. There might be a 
# better way to do this.
[[processors.starlark]]
namepass = ["interface", "interface_address"]
source = '''
state = {}

def apply(metric):
   #print("metric = %s" % metric) 

   # Convert from bytes to bits 
   if "ifHCInOctets" in metric.fields:
       metric.fields["ifHCInOctets"] *= 8
   if "ifHCOutOctets" in metric.fields:
       metric.fields["ifHCOutOctets"] *= 8

   # Store the ifIndex out of the ifXTable, we can use
   # use this to associate the interface name with the IP info
   if "ifIndex" in metric.tags:
       ipInfo = state.get(metric.tags["ifIndex"], [])
       ipInfo = sorted(ipInfo, key = lambda x: x.tags["ipAdEntAddr"])

       # We cannot store "arrays" here so we instead are going to create
       # multiple fields. This is very ugly but we can fix this in the
       # TSDS driver
       i = 0    
       for result in ipInfo:    
           value = result.tags["ipAdEntAddr"]
	   metric.tags["ip_address_%s" % i] = value
	   i += 1 

   # If we are handling an ipAddr metric, see if we can
   # grab the ifTable info to associate it with an interface
   if "ipAdEntIfIndex" in metric.tags:
       ifIndex = metric.tags["ipAdEntIfIndex"]
       ip_list = state.setdefault(ifIndex, [])

       # Filter out any that might have "timed out" since this is done
       # asynchronously and one at a time, we never have the full picture.
       # TODO: The expire time really should not be hardcoded?
       # Apparently there is no "filter" in starlark either
       ip_list = [x for x in ip_list if x.time > metric.time - (60*10)]

       # If we have not seen this IP before, store it
       if not [x for x in ip_list if x.tags["ipAdEntAddr"] == metric.tags["ipAdEntAddr"]]:
           ip_list.append(deepcopy(metric))

       #print("STATE = %s" % ip_list)
       state[ifIndex] = ip_list

   return metric
'''


###############################################################################
#                             INPUT PLUGINS                                   #
###############################################################################

## [NOTE]: For hosts with a different SNMP version, community, etc, the entire 
## block below can be copied and pasted multiple times, each time changing the 
## settings and the array of "agents" as needed.
[[inputs.snmp]]

  ## Host addresses to retrieve values for (hostname or IP address)
  agents = [
    "udp://yourhost:161"    
  ]

  ## Timeout for each request.
  timeout = "15s"

  ## SNMP version; can be 1, 2, or 3.
  version = 2

  ## SNMP community string.
  community = "public"

  ## Number of retries to attempt.
  retries = 2

  ## The GETBULK max-repetitions parameter.
  max_repetitions = 15

  ## Add fields and tables defining the variables you wish to collect.  This
  ## example collects the system uptime and interface variables.  Reference the
  ## full plugin documentation for configuration details.

  # Walk the ifXTable for counters, names, etc.
  [[inputs.snmp.table]]
    oid = "IF-MIB::ifXTable"
    name = "interface"
    inherit_tags = ["source"]

    [[inputs.snmp.table.field]]
      oid = "IF-MIB::ifName"
      name = "ifName"
      is_tag = true

    [[inputs.snmp.table.field]]
      oid = "IF-MIB::ifIndex"
      name = "ifIndex"
      is_tag = true

    [[inputs.snmp.table.field]]
      oid = "IF-MIB::ifAlias"
      name = "ifAlias"
      is_tag = true

    [[inputs.snmp.table.field]]
      oid = "IF-MIB::ifInErrors"
      name = "ifInErrors"

    [[inputs.snmp.table.field]]
      oid = "IF-MIB::ifOutErrors"
      name = "ifOutErrors"

    [[inputs.snmp.table.field]]
      oid = "IF-MIB::ifInDiscards"
      name = "ifInDiscards"

    [[inputs.snmp.table.field]]
      oid = "IF-MIB::ifOutDiscards"
      name = "ifOutDiscards"

    [[inputs.snmp.table.field]]
      oid = "IF-MIB::ifOperStatus"
      name = "ifOperStatus"

    [inputs.snmp.tagpass]
      ifName = ["et*", "xe*", "lo*"]


[[inputs.snmp]]
  agents = [
    "udp://yourhost:161"    
  ]

  ## Timeout for each request.
  timeout = "15s"

  ## SNMP version; can be 1, 2, or 3.
  version = 2

  ## SNMP community string.
  community = "public"


  # Walk ipAddrTable separately. It doesn't use the same
  # mapping schema so we'll handle that in the Starlark configuration
  [[inputs.snmp.table]]
      oid = "IP-MIB::ipAddrTable"
      name = "interface_address"

    [[inputs.snmp.table.field]]
      oid = "IP-MIB::ipAdEntIfIndex"
      name = "ipAdEntIfIndex"
      is_tag = true

    [[inputs.snmp.table.field]]
      oid = "IP-MIB::ipAdEntAddr"
      name = "ipAdEntAddr"
      is_tag = true

     [inputs.snmp.tagdrop]
       ipAdEntAddr = ["192.168.*", "127.*", "10.*"]
