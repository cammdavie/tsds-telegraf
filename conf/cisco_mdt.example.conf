# TELEGRAF AGENT CONFIG
# Use this configuration to run telegraf with the plugin
# Be sure to update the file paths for the plugin configuration within
[agent]

  # Collection interval for inputs
  interval            = "6s"
  round_interval      = true
  flush_interval      = "2s"
  metric_batch_size   = 1000
  metric_buffer_limit = 10000

  # Log at debug level.
  debug = true

###############################################################################
#                             INPUT PLUGINS                                   #
###############################################################################

[[inputs.cisco_telemetry_mdt]]
  transport = "tcp"
  service_address = ":57000"
  embedded_tags = [
    "Cisco-IOS-XR-qos-ma-oper:qos/interface-table/interface/input/service-policy-names/service-policy-instance/statistics/class-stats/class-name",
    "Cisco-IOS-XR-qos-ma-oper:qos/interface-table/interface/input/service-policy-names/service-policy-instance/statistics/service-policy-name",
    "Cisco-IOS-XR-qos-ma-oper:qos/interface-table/interface/output/service-policy-names/service-policy-instance/statistics/class-stats/class-name",
    "Cisco-IOS-XR-qos-ma-oper:qos/interface-table/interface/output/service-policy-names/service-policy-instance/statistics/service-policy-name",
    "Cisco-IOS-XR-ipv4-bgp-oper:bgp/instances/instance/instance-active/default-vrf/neighbors/neighbor/af-data/af-name"
  ]
  [inputs.cisco_telemetry_mdt.aliases]
    cpu     = "Cisco-IOS-XR-wdsysmon-fd-oper:system-monitoring/cpu-utilization"
    memory  = "Cisco-IOS-XR-nto-misc-oper:memory-summary/nodes/node/summary"
    intf    = "Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/latest/generic-counters"
    optical = "Cisco-IOS-XR-controller-optics-oper:optics-oper/optics-ports/optics-port/optics-info"
    bgp     = "Cisco-IOS-XR-ipv4-bgp-oper:bgp/instances/instance/instance-active/default-vrf/neighbors/neighbor"
    inbuf   = "Cisco-IOS-XR-qos-ma-oper:qos/interface-table/interface/input/service-policy-names/service-policy-instance/statistics"
    outbuf  = "Cisco-IOS-XR-qos-ma-oper:qos/interface-table/interface/output/service-policy-names/service-policy-instance/statistics"

###############################################################################
#                         PROCESSOR PLUGINS                                   #
###############################################################################
[[processors.starlark]]
  namepass = ["intf"]
  source = '''
def apply(metric):
    in_bytes = metric.fields.get("bytes_received")
    out_bytes = metric.fields.get("bytes_sent")

    if in_bytes != None:
        metric.fields["input_bits"] = 8 * int(in_bytes)
    if out_bytes != None:
        metric.fields["output_bits"] = 8 * int(out_bytes)

    return metric
'''


[[processors.starlark]]
  namepass = ["bgp"]
  source = '''
def apply(metric):

    # Calculate received prefixes as the sum of accepted and denied prefixes
    accepted = int(metric.fields.get("af_data/prefixes_accepted", -1))
    denied   = int(metric.fields.get("af_data/prefixes_denied", -1))
    if accepted >= 0 and denied >= 0:
        metric.fields["af_data/prefixes_received"] = accepted + denied

    return metric
'''


# Optical Data processing
[[processors.starlark]]
  namepass = ["optical"]
  source = '''
def apply(metric):

    rx = metric.fields.get('lane_data/receive_power')
    tx = metric.fields.get('lane_data/transmit_power')

    if rx != None:
        metric.fields['lane_data/receive_power'] = int(rx) / 1000
    if tx != None:
        metric.fields['lane_data/transmit_power'] = int(tx) / 1000

    return metric
'''


# Memory Data processing
[[processors.starlark]]
  namepass = ["memory"]
  source = '''
def apply(metric):

    # Calculate percent memory used
    total = metric.fields.get("ram_memory")
    free  = metric.fields.get("free_physical_memory")
    if total != None and free != None:
        metric.fields["percent_used"] = ((int(total)-int(free)) / int(total)) * 100
    return metric
'''

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

[[outputs.execd]]
  # Add metric names that should output to TSDS
  namepass = ["cpu","memory","intf","optical","bgp","inbuf","outbuf"]
  command = [
      "/usr/bin/python3",
      "/path/to/tsds-output.py",
      "/path/to/plugin/config.yaml"
  ]
  data_format = "json"
  restart_delay = "10s"
